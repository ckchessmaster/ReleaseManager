trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - func-src/*

variables:
  subscription: '9fba6314-ec74-4f90-ae35-ffc7d68ceca4'
  functionAppName: uan-fa-release-manager
  vmImageName: 'ubuntu-latest'
  workingDirectory: '$(System.DefaultWorkingDirectory)/func-src'

pool:
  vmImage: $(vmImageName)

stages:
- stage: Test
  displayName: Test
  jobs:
  - job: UnitTest
    displayName: UnitTest
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.8'
      inputs:
        versionSpec: 3.8
    - script: pip install -r requirements.txt
      workingDirectory: $(workingDirectory)
      displayName: 'Install Dependencies'
    - script: pytest $(workingDirectory)/tests --doctest-modules --junitxml=junit/test-results.xml
      displayName: Run Tests
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'
    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
- stage: Build
  displayName: Build
  dependsOn: Test
  condition: succeeded('Test')
  jobs:
  - job: Build
    displayName: Build
    steps:
  #   - task: UsePythonVersion@0
  #     displayName: 'Use Python 3.8'
  #     inputs:
  #       versionSpec: 3.8
  #   - bash: |
  #       if [-f extensions.csproj ]
  #       then
  #         dotnet build extensions.csproj -output
  #       fi
  #     workingDirectory: $(workingDirectory)
  #   - bash: |
  #       python -m venv .venv
  #       source .venv/bin/activate
  #       pip install -r requirements.txt
  #     displayName: 'Install Dependencies'
  #     workingDirectory: $(workingDirectory)
  #   - task: ArchiveFiles@2
  #     displayName: 'Archive files'
  #     inputs:
  #       rootFolderOrFile: '$(workingDirectory)'
  #       includeRootFolder: false
  #       archiveType: zip
  #       archiveFile: $(Build.ArtifactStagingDirectory)/ReleaseManagerFunctionApp$(Build.BuildId).zip
  #       replaceExistingArchive: true
  #   - publish: $(Build.ArtifactStagingDirectory)/ReleaseManagerFunctionApp$(Build.BuildId).zip
  #     displayName: 'Upload Package'
  #     artifact: drop
    - publish: $(workingDirectory)
      displayName: 'Upload Package'
      artifact: drop
- stage: Deploy
  displayName: Deploy
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          # - task: AzureFunctionApp@1
          #   displayName: 'Azure functions app deploy'
          #   inputs:
          #     azureSubscription: '$(subscription)'
          #     appType: functionAppLinux
          #     appName: $(functionAppName)
          #     package: '$(Pipeline.Workspace)/drop/ReleaseManagerFunctionApp$(Build.BuildId).zip'
          #     startUpCommand: source .venv/bin/activate
          # - script: npm i azure-functions-core-tools
          #   displayName: Install Azure Function Core Tools
          #   workingDirectory: $(Pipeline.Workspace)/drop
          - task: FuncToolsInstaller@0
          - script: func azure functionapp publish uan-fa-release-manager
            displayName: Deploy
            workingDirectory: $(Pipeline.Workspace)/drop
